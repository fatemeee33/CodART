/*
 * This file was auto-generated by speedy-antlr-tool v1.3.1
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_javalabeled_translator.h"


SA_JavaLabeledTranslator::SA_JavaLabeledTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_JavaLabeledTranslator::~SA_JavaLabeledTranslator() {
    Py_XDECREF(CompilationUnitContext_cls);
    Py_XDECREF(PackageDeclarationContext_cls);
    Py_XDECREF(ImportDeclarationContext_cls);
    Py_XDECREF(TypeDeclarationContext_cls);
    Py_XDECREF(ModifierContext_cls);
    Py_XDECREF(ClassOrInterfaceModifierContext_cls);
    Py_XDECREF(VariableModifierContext_cls);
    Py_XDECREF(ClassDeclarationContext_cls);
    Py_XDECREF(TypeParametersContext_cls);
    Py_XDECREF(TypeParameterContext_cls);
    Py_XDECREF(TypeBoundContext_cls);
    Py_XDECREF(EnumDeclarationContext_cls);
    Py_XDECREF(EnumConstantsContext_cls);
    Py_XDECREF(EnumConstantContext_cls);
    Py_XDECREF(EnumBodyDeclarationsContext_cls);
    Py_XDECREF(InterfaceDeclarationContext_cls);
    Py_XDECREF(ClassBodyContext_cls);
    Py_XDECREF(InterfaceBodyContext_cls);
    Py_XDECREF(ClassBodyDeclaration1Context_cls);
    Py_XDECREF(ClassBodyDeclaration0Context_cls);
    Py_XDECREF(ClassBodyDeclaration2Context_cls);
    Py_XDECREF(MemberDeclaration8Context_cls);
    Py_XDECREF(MemberDeclaration0Context_cls);
    Py_XDECREF(MemberDeclaration1Context_cls);
    Py_XDECREF(MemberDeclaration2Context_cls);
    Py_XDECREF(MemberDeclaration3Context_cls);
    Py_XDECREF(MemberDeclaration4Context_cls);
    Py_XDECREF(MemberDeclaration5Context_cls);
    Py_XDECREF(MemberDeclaration6Context_cls);
    Py_XDECREF(MemberDeclaration7Context_cls);
    Py_XDECREF(MethodDeclarationContext_cls);
    Py_XDECREF(MethodBodyContext_cls);
    Py_XDECREF(TypeTypeOrVoidContext_cls);
    Py_XDECREF(GenericMethodDeclarationContext_cls);
    Py_XDECREF(GenericConstructorDeclarationContext_cls);
    Py_XDECREF(ConstructorDeclarationContext_cls);
    Py_XDECREF(FieldDeclarationContext_cls);
    Py_XDECREF(InterfaceBodyDeclarationContext_cls);
    Py_XDECREF(InterfaceMemberDeclaration6Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration5Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration4Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration3Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration2Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration1Context_cls);
    Py_XDECREF(InterfaceMemberDeclaration0Context_cls);
    Py_XDECREF(ConstDeclarationContext_cls);
    Py_XDECREF(ConstantDeclaratorContext_cls);
    Py_XDECREF(InterfaceMethodDeclarationContext_cls);
    Py_XDECREF(InterfaceMethodModifierContext_cls);
    Py_XDECREF(GenericInterfaceMethodDeclarationContext_cls);
    Py_XDECREF(VariableDeclaratorsContext_cls);
    Py_XDECREF(VariableDeclaratorContext_cls);
    Py_XDECREF(VariableDeclaratorIdContext_cls);
    Py_XDECREF(VariableInitializer1Context_cls);
    Py_XDECREF(VariableInitializer0Context_cls);
    Py_XDECREF(ArrayInitializerContext_cls);
    Py_XDECREF(ClassOrInterfaceTypeContext_cls);
    Py_XDECREF(TypeArgument0Context_cls);
    Py_XDECREF(QualifiedNameListContext_cls);
    Py_XDECREF(FormalParametersContext_cls);
    Py_XDECREF(FormalParameterList1Context_cls);
    Py_XDECREF(FormalParameterList0Context_cls);
    Py_XDECREF(FormalParameterContext_cls);
    Py_XDECREF(LastFormalParameterContext_cls);
    Py_XDECREF(QualifiedNameContext_cls);
    Py_XDECREF(Literal2Context_cls);
    Py_XDECREF(Literal1Context_cls);
    Py_XDECREF(Literal0Context_cls);
    Py_XDECREF(Literal5Context_cls);
    Py_XDECREF(Literal4Context_cls);
    Py_XDECREF(Literal3Context_cls);
    Py_XDECREF(IntegerLiteralContext_cls);
    Py_XDECREF(FloatLiteralContext_cls);
    Py_XDECREF(AltAnnotationQualifiedNameContext_cls);
    Py_XDECREF(AnnotationContext_cls);
    Py_XDECREF(ElementValuePairsContext_cls);
    Py_XDECREF(ElementValuePairContext_cls);
    Py_XDECREF(ElementValue0Context_cls);
    Py_XDECREF(ElementValue2Context_cls);
    Py_XDECREF(ElementValue1Context_cls);
    Py_XDECREF(ElementValueArrayInitializerContext_cls);
    Py_XDECREF(AnnotationTypeDeclarationContext_cls);
    Py_XDECREF(AnnotationTypeBodyContext_cls);
    Py_XDECREF(AnnotationTypeElementDeclarationContext_cls);
    Py_XDECREF(AnnotationTypeElementRest0Context_cls);
    Py_XDECREF(AnnotationTypeElementRest1Context_cls);
    Py_XDECREF(AnnotationTypeElementRest2Context_cls);
    Py_XDECREF(AnnotationTypeElementRest3Context_cls);
    Py_XDECREF(AnnotationTypeElementRest4Context_cls);
    Py_XDECREF(AnnotationMethodOrConstantRest0Context_cls);
    Py_XDECREF(AnnotationMethodOrConstantRest1Context_cls);
    Py_XDECREF(AnnotationMethodRestContext_cls);
    Py_XDECREF(AnnotationConstantRestContext_cls);
    Py_XDECREF(DefaultValueContext_cls);
    Py_XDECREF(BlockContext_cls);
    Py_XDECREF(BlockStatement1Context_cls);
    Py_XDECREF(BlockStatement0Context_cls);
    Py_XDECREF(BlockStatement2Context_cls);
    Py_XDECREF(LocalVariableDeclarationContext_cls);
    Py_XDECREF(LocalTypeDeclarationContext_cls);
    Py_XDECREF(Statement14Context_cls);
    Py_XDECREF(Statement15Context_cls);
    Py_XDECREF(Statement12Context_cls);
    Py_XDECREF(Statement13Context_cls);
    Py_XDECREF(Statement9Context_cls);
    Py_XDECREF(Statement7Context_cls);
    Py_XDECREF(Statement16Context_cls);
    Py_XDECREF(Statement8Context_cls);
    Py_XDECREF(Statement5Context_cls);
    Py_XDECREF(Statement6Context_cls);
    Py_XDECREF(Statement3Context_cls);
    Py_XDECREF(Statement4Context_cls);
    Py_XDECREF(Statement1Context_cls);
    Py_XDECREF(Statement2Context_cls);
    Py_XDECREF(Statement0Context_cls);
    Py_XDECREF(Statement10Context_cls);
    Py_XDECREF(Statement11Context_cls);
    Py_XDECREF(CatchClauseContext_cls);
    Py_XDECREF(CatchTypeContext_cls);
    Py_XDECREF(FinallyBlockContext_cls);
    Py_XDECREF(ResourceSpecificationContext_cls);
    Py_XDECREF(ResourcesContext_cls);
    Py_XDECREF(ResourceContext_cls);
    Py_XDECREF(SwitchBlockStatementGroupContext_cls);
    Py_XDECREF(SwitchLabelContext_cls);
    Py_XDECREF(ForControl0Context_cls);
    Py_XDECREF(ForControl1Context_cls);
    Py_XDECREF(ForInit1Context_cls);
    Py_XDECREF(ForInit0Context_cls);
    Py_XDECREF(EnhancedForControlContext_cls);
    Py_XDECREF(ParExpressionContext_cls);
    Py_XDECREF(ExpressionListContext_cls);
    Py_XDECREF(MethodCall0Context_cls);
    Py_XDECREF(MethodCall1Context_cls);
    Py_XDECREF(MethodCall2Context_cls);
    Py_XDECREF(Expression8Context_cls);
    Py_XDECREF(Expression10Context_cls);
    Py_XDECREF(Expression9Context_cls);
    Py_XDECREF(Expression12Context_cls);
    Py_XDECREF(Expression11Context_cls);
    Py_XDECREF(Expression14Context_cls);
    Py_XDECREF(Expression13Context_cls);
    Py_XDECREF(Expression16Context_cls);
    Py_XDECREF(Expression15Context_cls);
    Py_XDECREF(Expression18Context_cls);
    Py_XDECREF(Expression17Context_cls);
    Py_XDECREF(Expression19Context_cls);
    Py_XDECREF(Expression6Context_cls);
    Py_XDECREF(Expression7Context_cls);
    Py_XDECREF(Expression4Context_cls);
    Py_XDECREF(Expression5Context_cls);
    Py_XDECREF(Expression2Context_cls);
    Py_XDECREF(Expression3Context_cls);
    Py_XDECREF(Expression0Context_cls);
    Py_XDECREF(Expression1Context_cls);
    Py_XDECREF(Expression21Context_cls);
    Py_XDECREF(Expression20Context_cls);
    Py_XDECREF(Expression23Context_cls);
    Py_XDECREF(Expression22Context_cls);
    Py_XDECREF(Expression25Context_cls);
    Py_XDECREF(Expression24Context_cls);
    Py_XDECREF(LambdaExpressionContext_cls);
    Py_XDECREF(LambdaParameters0Context_cls);
    Py_XDECREF(LambdaParameters1Context_cls);
    Py_XDECREF(LambdaParameters2Context_cls);
    Py_XDECREF(LambdaBody0Context_cls);
    Py_XDECREF(LambdaBody1Context_cls);
    Py_XDECREF(Primary6Context_cls);
    Py_XDECREF(Primary2Context_cls);
    Py_XDECREF(Primary3Context_cls);
    Py_XDECREF(Primary4Context_cls);
    Py_XDECREF(Primary5Context_cls);
    Py_XDECREF(Primary0Context_cls);
    Py_XDECREF(Primary1Context_cls);
    Py_XDECREF(ClassTypeContext_cls);
    Py_XDECREF(Creator1Context_cls);
    Py_XDECREF(Creator0Context_cls);
    Py_XDECREF(CreatedName0Context_cls);
    Py_XDECREF(CreatedName1Context_cls);
    Py_XDECREF(InnerCreatorContext_cls);
    Py_XDECREF(ArrayCreatorRestContext_cls);
    Py_XDECREF(ClassCreatorRestContext_cls);
    Py_XDECREF(ExplicitGenericInvocationContext_cls);
    Py_XDECREF(TypeArgumentsOrDiamondContext_cls);
    Py_XDECREF(NonWildcardTypeArgumentsOrDiamondContext_cls);
    Py_XDECREF(NonWildcardTypeArgumentsContext_cls);
    Py_XDECREF(TypeListContext_cls);
    Py_XDECREF(TypeTypeContext_cls);
    Py_XDECREF(PrimitiveTypeContext_cls);
    Py_XDECREF(TypeArgumentsContext_cls);
    Py_XDECREF(SuperSuffix1Context_cls);
    Py_XDECREF(SuperSuffix0Context_cls);
    Py_XDECREF(ExplicitGenericInvocationSuffix0Context_cls);
    Py_XDECREF(ExplicitGenericInvocationSuffix1Context_cls);
    Py_XDECREF(ArgumentsContext_cls);
}


antlrcpp::Any SA_JavaLabeledTranslator::visitCompilationUnit(JavaLabeledParser::CompilationUnitContext *ctx){
    if(!CompilationUnitContext_cls) CompilationUnitContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompilationUnitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompilationUnitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPackageDeclaration(JavaLabeledParser::PackageDeclarationContext *ctx){
    if(!PackageDeclarationContext_cls) PackageDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "PackageDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PackageDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitImportDeclaration(JavaLabeledParser::ImportDeclarationContext *ctx){
    if(!ImportDeclarationContext_cls) ImportDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ImportDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ImportDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeDeclaration(JavaLabeledParser::TypeDeclarationContext *ctx){
    if(!TypeDeclarationContext_cls) TypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitModifier(JavaLabeledParser::ModifierContext *ctx){
    if(!ModifierContext_cls) ModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassOrInterfaceModifier(JavaLabeledParser::ClassOrInterfaceModifierContext *ctx){
    if(!ClassOrInterfaceModifierContext_cls) ClassOrInterfaceModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassOrInterfaceModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassOrInterfaceModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableModifier(JavaLabeledParser::VariableModifierContext *ctx){
    if(!VariableModifierContext_cls) VariableModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassDeclaration(JavaLabeledParser::ClassDeclarationContext *ctx){
    if(!ClassDeclarationContext_cls) ClassDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeParameters(JavaLabeledParser::TypeParametersContext *ctx){
    if(!TypeParametersContext_cls) TypeParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeParameter(JavaLabeledParser::TypeParameterContext *ctx){
    if(!TypeParameterContext_cls) TypeParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeBound(JavaLabeledParser::TypeBoundContext *ctx){
    if(!TypeBoundContext_cls) TypeBoundContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeBoundContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeBoundContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitEnumDeclaration(JavaLabeledParser::EnumDeclarationContext *ctx){
    if(!EnumDeclarationContext_cls) EnumDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitEnumConstants(JavaLabeledParser::EnumConstantsContext *ctx){
    if(!EnumConstantsContext_cls) EnumConstantsContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumConstantsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumConstantsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitEnumConstant(JavaLabeledParser::EnumConstantContext *ctx){
    if(!EnumConstantContext_cls) EnumConstantContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumConstantContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumConstantContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitEnumBodyDeclarations(JavaLabeledParser::EnumBodyDeclarationsContext *ctx){
    if(!EnumBodyDeclarationsContext_cls) EnumBodyDeclarationsContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumBodyDeclarationsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumBodyDeclarationsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceDeclaration(JavaLabeledParser::InterfaceDeclarationContext *ctx){
    if(!InterfaceDeclarationContext_cls) InterfaceDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassBody(JavaLabeledParser::ClassBodyContext *ctx){
    if(!ClassBodyContext_cls) ClassBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceBody(JavaLabeledParser::InterfaceBodyContext *ctx){
    if(!InterfaceBodyContext_cls) InterfaceBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassBodyDeclaration1(JavaLabeledParser::ClassBodyDeclaration1Context *ctx){
    if(!ClassBodyDeclaration1Context_cls) ClassBodyDeclaration1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyDeclaration1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyDeclaration1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassBodyDeclaration0(JavaLabeledParser::ClassBodyDeclaration0Context *ctx){
    if(!ClassBodyDeclaration0Context_cls) ClassBodyDeclaration0Context_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyDeclaration0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyDeclaration0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassBodyDeclaration2(JavaLabeledParser::ClassBodyDeclaration2Context *ctx){
    if(!ClassBodyDeclaration2Context_cls) ClassBodyDeclaration2Context_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyDeclaration2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyDeclaration2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration8(JavaLabeledParser::MemberDeclaration8Context *ctx){
    if(!MemberDeclaration8Context_cls) MemberDeclaration8Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration8Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration8Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration0(JavaLabeledParser::MemberDeclaration0Context *ctx){
    if(!MemberDeclaration0Context_cls) MemberDeclaration0Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration1(JavaLabeledParser::MemberDeclaration1Context *ctx){
    if(!MemberDeclaration1Context_cls) MemberDeclaration1Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration2(JavaLabeledParser::MemberDeclaration2Context *ctx){
    if(!MemberDeclaration2Context_cls) MemberDeclaration2Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration3(JavaLabeledParser::MemberDeclaration3Context *ctx){
    if(!MemberDeclaration3Context_cls) MemberDeclaration3Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration4(JavaLabeledParser::MemberDeclaration4Context *ctx){
    if(!MemberDeclaration4Context_cls) MemberDeclaration4Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration5(JavaLabeledParser::MemberDeclaration5Context *ctx){
    if(!MemberDeclaration5Context_cls) MemberDeclaration5Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration6(JavaLabeledParser::MemberDeclaration6Context *ctx){
    if(!MemberDeclaration6Context_cls) MemberDeclaration6Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration6Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration6Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMemberDeclaration7(JavaLabeledParser::MemberDeclaration7Context *ctx){
    if(!MemberDeclaration7Context_cls) MemberDeclaration7Context_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaration7Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaration7Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMethodDeclaration(JavaLabeledParser::MethodDeclarationContext *ctx){
    if(!MethodDeclarationContext_cls) MethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMethodBody(JavaLabeledParser::MethodBodyContext *ctx){
    if(!MethodBodyContext_cls) MethodBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "MethodBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeTypeOrVoid(JavaLabeledParser::TypeTypeOrVoidContext *ctx){
    if(!TypeTypeOrVoidContext_cls) TypeTypeOrVoidContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeTypeOrVoidContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeTypeOrVoidContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitGenericMethodDeclaration(JavaLabeledParser::GenericMethodDeclarationContext *ctx){
    if(!GenericMethodDeclarationContext_cls) GenericMethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "GenericMethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GenericMethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitGenericConstructorDeclaration(JavaLabeledParser::GenericConstructorDeclarationContext *ctx){
    if(!GenericConstructorDeclarationContext_cls) GenericConstructorDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "GenericConstructorDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GenericConstructorDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitConstructorDeclaration(JavaLabeledParser::ConstructorDeclarationContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"constructorBody", static_cast<void*>(ctx->constructorBody)}
    };
    if(!ConstructorDeclarationContext_cls) ConstructorDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstructorDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstructorDeclarationContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFieldDeclaration(JavaLabeledParser::FieldDeclarationContext *ctx){
    if(!FieldDeclarationContext_cls) FieldDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "FieldDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FieldDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceBodyDeclaration(JavaLabeledParser::InterfaceBodyDeclarationContext *ctx){
    if(!InterfaceBodyDeclarationContext_cls) InterfaceBodyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceBodyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceBodyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration6(JavaLabeledParser::InterfaceMemberDeclaration6Context *ctx){
    if(!InterfaceMemberDeclaration6Context_cls) InterfaceMemberDeclaration6Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration6Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration6Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration5(JavaLabeledParser::InterfaceMemberDeclaration5Context *ctx){
    if(!InterfaceMemberDeclaration5Context_cls) InterfaceMemberDeclaration5Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration4(JavaLabeledParser::InterfaceMemberDeclaration4Context *ctx){
    if(!InterfaceMemberDeclaration4Context_cls) InterfaceMemberDeclaration4Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration3(JavaLabeledParser::InterfaceMemberDeclaration3Context *ctx){
    if(!InterfaceMemberDeclaration3Context_cls) InterfaceMemberDeclaration3Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration2(JavaLabeledParser::InterfaceMemberDeclaration2Context *ctx){
    if(!InterfaceMemberDeclaration2Context_cls) InterfaceMemberDeclaration2Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration1(JavaLabeledParser::InterfaceMemberDeclaration1Context *ctx){
    if(!InterfaceMemberDeclaration1Context_cls) InterfaceMemberDeclaration1Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMemberDeclaration0(JavaLabeledParser::InterfaceMemberDeclaration0Context *ctx){
    if(!InterfaceMemberDeclaration0Context_cls) InterfaceMemberDeclaration0Context_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMemberDeclaration0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMemberDeclaration0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitConstDeclaration(JavaLabeledParser::ConstDeclarationContext *ctx){
    if(!ConstDeclarationContext_cls) ConstDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitConstantDeclarator(JavaLabeledParser::ConstantDeclaratorContext *ctx){
    if(!ConstantDeclaratorContext_cls) ConstantDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstantDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstantDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMethodDeclaration(JavaLabeledParser::InterfaceMethodDeclarationContext *ctx){
    if(!InterfaceMethodDeclarationContext_cls) InterfaceMethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInterfaceMethodModifier(JavaLabeledParser::InterfaceMethodModifierContext *ctx){
    if(!InterfaceMethodModifierContext_cls) InterfaceMethodModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "InterfaceMethodModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InterfaceMethodModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitGenericInterfaceMethodDeclaration(JavaLabeledParser::GenericInterfaceMethodDeclarationContext *ctx){
    if(!GenericInterfaceMethodDeclarationContext_cls) GenericInterfaceMethodDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "GenericInterfaceMethodDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GenericInterfaceMethodDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableDeclarators(JavaLabeledParser::VariableDeclaratorsContext *ctx){
    if(!VariableDeclaratorsContext_cls) VariableDeclaratorsContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableDeclarator(JavaLabeledParser::VariableDeclaratorContext *ctx){
    if(!VariableDeclaratorContext_cls) VariableDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableDeclaratorId(JavaLabeledParser::VariableDeclaratorIdContext *ctx){
    if(!VariableDeclaratorIdContext_cls) VariableDeclaratorIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclaratorIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclaratorIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableInitializer1(JavaLabeledParser::VariableInitializer1Context *ctx){
    if(!VariableInitializer1Context_cls) VariableInitializer1Context_cls = PyObject_GetAttrString(translator->parser_cls, "VariableInitializer1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableInitializer1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitVariableInitializer0(JavaLabeledParser::VariableInitializer0Context *ctx){
    if(!VariableInitializer0Context_cls) VariableInitializer0Context_cls = PyObject_GetAttrString(translator->parser_cls, "VariableInitializer0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableInitializer0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitArrayInitializer(JavaLabeledParser::ArrayInitializerContext *ctx){
    if(!ArrayInitializerContext_cls) ArrayInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArrayInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArrayInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassOrInterfaceType(JavaLabeledParser::ClassOrInterfaceTypeContext *ctx){
    if(!ClassOrInterfaceTypeContext_cls) ClassOrInterfaceTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassOrInterfaceTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassOrInterfaceTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeArgument0(JavaLabeledParser::TypeArgument0Context *ctx){
    if(!TypeArgument0Context_cls) TypeArgument0Context_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgument0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgument0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitQualifiedNameList(JavaLabeledParser::QualifiedNameListContext *ctx){
    if(!QualifiedNameListContext_cls) QualifiedNameListContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiedNameListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiedNameListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFormalParameters(JavaLabeledParser::FormalParametersContext *ctx){
    if(!FormalParametersContext_cls) FormalParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFormalParameterList1(JavaLabeledParser::FormalParameterList1Context *ctx){
    if(!FormalParameterList1Context_cls) FormalParameterList1Context_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParameterList1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParameterList1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFormalParameterList0(JavaLabeledParser::FormalParameterList0Context *ctx){
    if(!FormalParameterList0Context_cls) FormalParameterList0Context_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParameterList0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParameterList0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFormalParameter(JavaLabeledParser::FormalParameterContext *ctx){
    if(!FormalParameterContext_cls) FormalParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormalParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormalParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLastFormalParameter(JavaLabeledParser::LastFormalParameterContext *ctx){
    if(!LastFormalParameterContext_cls) LastFormalParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "LastFormalParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LastFormalParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitQualifiedName(JavaLabeledParser::QualifiedNameContext *ctx){
    if(!QualifiedNameContext_cls) QualifiedNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiedNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiedNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral2(JavaLabeledParser::Literal2Context *ctx){
    if(!Literal2Context_cls) Literal2Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral1(JavaLabeledParser::Literal1Context *ctx){
    if(!Literal1Context_cls) Literal1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral0(JavaLabeledParser::Literal0Context *ctx){
    if(!Literal0Context_cls) Literal0Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral5(JavaLabeledParser::Literal5Context *ctx){
    if(!Literal5Context_cls) Literal5Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral4(JavaLabeledParser::Literal4Context *ctx){
    if(!Literal4Context_cls) Literal4Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLiteral3(JavaLabeledParser::Literal3Context *ctx){
    if(!Literal3Context_cls) Literal3Context_cls = PyObject_GetAttrString(translator->parser_cls, "Literal3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Literal3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitIntegerLiteral(JavaLabeledParser::IntegerLiteralContext *ctx){
    if(!IntegerLiteralContext_cls) IntegerLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "IntegerLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IntegerLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFloatLiteral(JavaLabeledParser::FloatLiteralContext *ctx){
    if(!FloatLiteralContext_cls) FloatLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "FloatLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FloatLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAltAnnotationQualifiedName(JavaLabeledParser::AltAnnotationQualifiedNameContext *ctx){
    if(!AltAnnotationQualifiedNameContext_cls) AltAnnotationQualifiedNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "AltAnnotationQualifiedNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AltAnnotationQualifiedNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotation(JavaLabeledParser::AnnotationContext *ctx){
    if(!AnnotationContext_cls) AnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValuePairs(JavaLabeledParser::ElementValuePairsContext *ctx){
    if(!ElementValuePairsContext_cls) ElementValuePairsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValuePairsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValuePairsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValuePair(JavaLabeledParser::ElementValuePairContext *ctx){
    if(!ElementValuePairContext_cls) ElementValuePairContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValuePairContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValuePairContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValue0(JavaLabeledParser::ElementValue0Context *ctx){
    if(!ElementValue0Context_cls) ElementValue0Context_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValue0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValue0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValue2(JavaLabeledParser::ElementValue2Context *ctx){
    if(!ElementValue2Context_cls) ElementValue2Context_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValue2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValue2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValue1(JavaLabeledParser::ElementValue1Context *ctx){
    if(!ElementValue1Context_cls) ElementValue1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValue1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValue1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitElementValueArrayInitializer(JavaLabeledParser::ElementValueArrayInitializerContext *ctx){
    if(!ElementValueArrayInitializerContext_cls) ElementValueArrayInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementValueArrayInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementValueArrayInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeDeclaration(JavaLabeledParser::AnnotationTypeDeclarationContext *ctx){
    if(!AnnotationTypeDeclarationContext_cls) AnnotationTypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeBody(JavaLabeledParser::AnnotationTypeBodyContext *ctx){
    if(!AnnotationTypeBodyContext_cls) AnnotationTypeBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementDeclaration(JavaLabeledParser::AnnotationTypeElementDeclarationContext *ctx){
    if(!AnnotationTypeElementDeclarationContext_cls) AnnotationTypeElementDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementRest0(JavaLabeledParser::AnnotationTypeElementRest0Context *ctx){
    if(!AnnotationTypeElementRest0Context_cls) AnnotationTypeElementRest0Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRest0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRest0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementRest1(JavaLabeledParser::AnnotationTypeElementRest1Context *ctx){
    if(!AnnotationTypeElementRest1Context_cls) AnnotationTypeElementRest1Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRest1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRest1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementRest2(JavaLabeledParser::AnnotationTypeElementRest2Context *ctx){
    if(!AnnotationTypeElementRest2Context_cls) AnnotationTypeElementRest2Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRest2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRest2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementRest3(JavaLabeledParser::AnnotationTypeElementRest3Context *ctx){
    if(!AnnotationTypeElementRest3Context_cls) AnnotationTypeElementRest3Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRest3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRest3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationTypeElementRest4(JavaLabeledParser::AnnotationTypeElementRest4Context *ctx){
    if(!AnnotationTypeElementRest4Context_cls) AnnotationTypeElementRest4Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationTypeElementRest4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationTypeElementRest4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationMethodOrConstantRest0(JavaLabeledParser::AnnotationMethodOrConstantRest0Context *ctx){
    if(!AnnotationMethodOrConstantRest0Context_cls) AnnotationMethodOrConstantRest0Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationMethodOrConstantRest0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationMethodOrConstantRest0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationMethodOrConstantRest1(JavaLabeledParser::AnnotationMethodOrConstantRest1Context *ctx){
    if(!AnnotationMethodOrConstantRest1Context_cls) AnnotationMethodOrConstantRest1Context_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationMethodOrConstantRest1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationMethodOrConstantRest1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationMethodRest(JavaLabeledParser::AnnotationMethodRestContext *ctx){
    if(!AnnotationMethodRestContext_cls) AnnotationMethodRestContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationMethodRestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationMethodRestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitAnnotationConstantRest(JavaLabeledParser::AnnotationConstantRestContext *ctx){
    if(!AnnotationConstantRestContext_cls) AnnotationConstantRestContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationConstantRestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationConstantRestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitDefaultValue(JavaLabeledParser::DefaultValueContext *ctx){
    if(!DefaultValueContext_cls) DefaultValueContext_cls = PyObject_GetAttrString(translator->parser_cls, "DefaultValueContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DefaultValueContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitBlock(JavaLabeledParser::BlockContext *ctx){
    if(!BlockContext_cls) BlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitBlockStatement1(JavaLabeledParser::BlockStatement1Context *ctx){
    if(!BlockStatement1Context_cls) BlockStatement1Context_cls = PyObject_GetAttrString(translator->parser_cls, "BlockStatement1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockStatement1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitBlockStatement0(JavaLabeledParser::BlockStatement0Context *ctx){
    if(!BlockStatement0Context_cls) BlockStatement0Context_cls = PyObject_GetAttrString(translator->parser_cls, "BlockStatement0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockStatement0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitBlockStatement2(JavaLabeledParser::BlockStatement2Context *ctx){
    if(!BlockStatement2Context_cls) BlockStatement2Context_cls = PyObject_GetAttrString(translator->parser_cls, "BlockStatement2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockStatement2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLocalVariableDeclaration(JavaLabeledParser::LocalVariableDeclarationContext *ctx){
    if(!LocalVariableDeclarationContext_cls) LocalVariableDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "LocalVariableDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LocalVariableDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLocalTypeDeclaration(JavaLabeledParser::LocalTypeDeclarationContext *ctx){
    if(!LocalTypeDeclarationContext_cls) LocalTypeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "LocalTypeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LocalTypeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement14(JavaLabeledParser::Statement14Context *ctx){
    if(!Statement14Context_cls) Statement14Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement14Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement14Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement15(JavaLabeledParser::Statement15Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"statementExpression", static_cast<void*>(ctx->statementExpression)}
    };
    if(!Statement15Context_cls) Statement15Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement15Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement15Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement12(JavaLabeledParser::Statement12Context *ctx){
    if(!Statement12Context_cls) Statement12Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement12Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement12Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement13(JavaLabeledParser::Statement13Context *ctx){
    if(!Statement13Context_cls) Statement13Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement13Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement13Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement9(JavaLabeledParser::Statement9Context *ctx){
    if(!Statement9Context_cls) Statement9Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement9Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement9Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement7(JavaLabeledParser::Statement7Context *ctx){
    if(!Statement7Context_cls) Statement7Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement7Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement7Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement16(JavaLabeledParser::Statement16Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"identifierLabel", static_cast<void*>(ctx->identifierLabel)}
    };
    if(!Statement16Context_cls) Statement16Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement16Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement16Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement8(JavaLabeledParser::Statement8Context *ctx){
    if(!Statement8Context_cls) Statement8Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement8Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement8Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement5(JavaLabeledParser::Statement5Context *ctx){
    if(!Statement5Context_cls) Statement5Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement6(JavaLabeledParser::Statement6Context *ctx){
    if(!Statement6Context_cls) Statement6Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement6Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement6Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement3(JavaLabeledParser::Statement3Context *ctx){
    if(!Statement3Context_cls) Statement3Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement4(JavaLabeledParser::Statement4Context *ctx){
    if(!Statement4Context_cls) Statement4Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement1(JavaLabeledParser::Statement1Context *ctx){
    if(!Statement1Context_cls) Statement1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement2(JavaLabeledParser::Statement2Context *ctx){
    if(!Statement2Context_cls) Statement2Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement0(JavaLabeledParser::Statement0Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"blockLabel", static_cast<void*>(ctx->blockLabel)}
    };
    if(!Statement0Context_cls) Statement0Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement0Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement10(JavaLabeledParser::Statement10Context *ctx){
    if(!Statement10Context_cls) Statement10Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement10Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement10Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitStatement11(JavaLabeledParser::Statement11Context *ctx){
    if(!Statement11Context_cls) Statement11Context_cls = PyObject_GetAttrString(translator->parser_cls, "Statement11Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement11Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCatchClause(JavaLabeledParser::CatchClauseContext *ctx){
    if(!CatchClauseContext_cls) CatchClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "CatchClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CatchClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCatchType(JavaLabeledParser::CatchTypeContext *ctx){
    if(!CatchTypeContext_cls) CatchTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "CatchTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CatchTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitFinallyBlock(JavaLabeledParser::FinallyBlockContext *ctx){
    if(!FinallyBlockContext_cls) FinallyBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "FinallyBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FinallyBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitResourceSpecification(JavaLabeledParser::ResourceSpecificationContext *ctx){
    if(!ResourceSpecificationContext_cls) ResourceSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourceSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourceSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitResources(JavaLabeledParser::ResourcesContext *ctx){
    if(!ResourcesContext_cls) ResourcesContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourcesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourcesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitResource(JavaLabeledParser::ResourceContext *ctx){
    if(!ResourceContext_cls) ResourceContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResourceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResourceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitSwitchBlockStatementGroup(JavaLabeledParser::SwitchBlockStatementGroupContext *ctx){
    if(!SwitchBlockStatementGroupContext_cls) SwitchBlockStatementGroupContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchBlockStatementGroupContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchBlockStatementGroupContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitSwitchLabel(JavaLabeledParser::SwitchLabelContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"constantExpression", static_cast<void*>(ctx->constantExpression)},
        {"enumConstantName", static_cast<void*>(ctx->enumConstantName)}
    };
    if(!SwitchLabelContext_cls) SwitchLabelContext_cls = PyObject_GetAttrString(translator->parser_cls, "SwitchLabelContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SwitchLabelContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitForControl0(JavaLabeledParser::ForControl0Context *ctx){
    if(!ForControl0Context_cls) ForControl0Context_cls = PyObject_GetAttrString(translator->parser_cls, "ForControl0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForControl0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitForControl1(JavaLabeledParser::ForControl1Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"forUpdate", static_cast<void*>(ctx->forUpdate)}
    };
    if(!ForControl1Context_cls) ForControl1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ForControl1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForControl1Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitForInit1(JavaLabeledParser::ForInit1Context *ctx){
    if(!ForInit1Context_cls) ForInit1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ForInit1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForInit1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitForInit0(JavaLabeledParser::ForInit0Context *ctx){
    if(!ForInit0Context_cls) ForInit0Context_cls = PyObject_GetAttrString(translator->parser_cls, "ForInit0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForInit0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitEnhancedForControl(JavaLabeledParser::EnhancedForControlContext *ctx){
    if(!EnhancedForControlContext_cls) EnhancedForControlContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnhancedForControlContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnhancedForControlContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitParExpression(JavaLabeledParser::ParExpressionContext *ctx){
    if(!ParExpressionContext_cls) ParExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpressionList(JavaLabeledParser::ExpressionListContext *ctx){
    if(!ExpressionListContext_cls) ExpressionListContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMethodCall0(JavaLabeledParser::MethodCall0Context *ctx){
    if(!MethodCall0Context_cls) MethodCall0Context_cls = PyObject_GetAttrString(translator->parser_cls, "MethodCall0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodCall0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMethodCall1(JavaLabeledParser::MethodCall1Context *ctx){
    if(!MethodCall1Context_cls) MethodCall1Context_cls = PyObject_GetAttrString(translator->parser_cls, "MethodCall1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodCall1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitMethodCall2(JavaLabeledParser::MethodCall2Context *ctx){
    if(!MethodCall2Context_cls) MethodCall2Context_cls = PyObject_GetAttrString(translator->parser_cls, "MethodCall2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MethodCall2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression8(JavaLabeledParser::Expression8Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"prefix", static_cast<void*>(ctx->prefix)}
    };
    if(!Expression8Context_cls) Expression8Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression8Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression8Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression10(JavaLabeledParser::Expression10Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression10Context_cls) Expression10Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression10Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression10Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression9(JavaLabeledParser::Expression9Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression9Context_cls) Expression9Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression9Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression9Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression12(JavaLabeledParser::Expression12Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression12Context_cls) Expression12Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression12Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression12Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression11(JavaLabeledParser::Expression11Context *ctx){
    if(!Expression11Context_cls) Expression11Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression11Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression11Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression14(JavaLabeledParser::Expression14Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression14Context_cls) Expression14Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression14Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression14Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression13(JavaLabeledParser::Expression13Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression13Context_cls) Expression13Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression13Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression13Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression16(JavaLabeledParser::Expression16Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression16Context_cls) Expression16Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression16Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression16Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression15(JavaLabeledParser::Expression15Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression15Context_cls) Expression15Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression15Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression15Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression18(JavaLabeledParser::Expression18Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression18Context_cls) Expression18Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression18Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression18Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression17(JavaLabeledParser::Expression17Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression17Context_cls) Expression17Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression17Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression17Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression19(JavaLabeledParser::Expression19Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression19Context_cls) Expression19Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression19Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression19Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression6(JavaLabeledParser::Expression6Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"postfix", static_cast<void*>(ctx->postfix)}
    };
    if(!Expression6Context_cls) Expression6Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression6Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression6Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression7(JavaLabeledParser::Expression7Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"prefix", static_cast<void*>(ctx->prefix)}
    };
    if(!Expression7Context_cls) Expression7Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression7Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression7Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression4(JavaLabeledParser::Expression4Context *ctx){
    if(!Expression4Context_cls) Expression4Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression5(JavaLabeledParser::Expression5Context *ctx){
    if(!Expression5Context_cls) Expression5Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression2(JavaLabeledParser::Expression2Context *ctx){
    if(!Expression2Context_cls) Expression2Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression3(JavaLabeledParser::Expression3Context *ctx){
    if(!Expression3Context_cls) Expression3Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression0(JavaLabeledParser::Expression0Context *ctx){
    if(!Expression0Context_cls) Expression0Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression1(JavaLabeledParser::Expression1Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression1Context_cls) Expression1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression1Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression21(JavaLabeledParser::Expression21Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression21Context_cls) Expression21Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression21Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression21Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression20(JavaLabeledParser::Expression20Context *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"bop", static_cast<void*>(ctx->bop)}
    };
    if(!Expression20Context_cls) Expression20Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression20Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression20Context_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression23(JavaLabeledParser::Expression23Context *ctx){
    if(!Expression23Context_cls) Expression23Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression23Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression23Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression22(JavaLabeledParser::Expression22Context *ctx){
    if(!Expression22Context_cls) Expression22Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression22Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression22Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression25(JavaLabeledParser::Expression25Context *ctx){
    if(!Expression25Context_cls) Expression25Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression25Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression25Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExpression24(JavaLabeledParser::Expression24Context *ctx){
    if(!Expression24Context_cls) Expression24Context_cls = PyObject_GetAttrString(translator->parser_cls, "Expression24Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression24Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaExpression(JavaLabeledParser::LambdaExpressionContext *ctx){
    if(!LambdaExpressionContext_cls) LambdaExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaParameters0(JavaLabeledParser::LambdaParameters0Context *ctx){
    if(!LambdaParameters0Context_cls) LambdaParameters0Context_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParameters0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParameters0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaParameters1(JavaLabeledParser::LambdaParameters1Context *ctx){
    if(!LambdaParameters1Context_cls) LambdaParameters1Context_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParameters1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParameters1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaParameters2(JavaLabeledParser::LambdaParameters2Context *ctx){
    if(!LambdaParameters2Context_cls) LambdaParameters2Context_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParameters2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParameters2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaBody0(JavaLabeledParser::LambdaBody0Context *ctx){
    if(!LambdaBody0Context_cls) LambdaBody0Context_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaBody0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaBody0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitLambdaBody1(JavaLabeledParser::LambdaBody1Context *ctx){
    if(!LambdaBody1Context_cls) LambdaBody1Context_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaBody1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaBody1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary6(JavaLabeledParser::Primary6Context *ctx){
    if(!Primary6Context_cls) Primary6Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary6Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary6Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary2(JavaLabeledParser::Primary2Context *ctx){
    if(!Primary2Context_cls) Primary2Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary3(JavaLabeledParser::Primary3Context *ctx){
    if(!Primary3Context_cls) Primary3Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary3Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary3Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary4(JavaLabeledParser::Primary4Context *ctx){
    if(!Primary4Context_cls) Primary4Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary4Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary4Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary5(JavaLabeledParser::Primary5Context *ctx){
    if(!Primary5Context_cls) Primary5Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary5Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary5Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary0(JavaLabeledParser::Primary0Context *ctx){
    if(!Primary0Context_cls) Primary0Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimary1(JavaLabeledParser::Primary1Context *ctx){
    if(!Primary1Context_cls) Primary1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Primary1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassType(JavaLabeledParser::ClassTypeContext *ctx){
    if(!ClassTypeContext_cls) ClassTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCreator1(JavaLabeledParser::Creator1Context *ctx){
    if(!Creator1Context_cls) Creator1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Creator1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Creator1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCreator0(JavaLabeledParser::Creator0Context *ctx){
    if(!Creator0Context_cls) Creator0Context_cls = PyObject_GetAttrString(translator->parser_cls, "Creator0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Creator0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCreatedName0(JavaLabeledParser::CreatedName0Context *ctx){
    if(!CreatedName0Context_cls) CreatedName0Context_cls = PyObject_GetAttrString(translator->parser_cls, "CreatedName0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CreatedName0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitCreatedName1(JavaLabeledParser::CreatedName1Context *ctx){
    if(!CreatedName1Context_cls) CreatedName1Context_cls = PyObject_GetAttrString(translator->parser_cls, "CreatedName1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CreatedName1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitInnerCreator(JavaLabeledParser::InnerCreatorContext *ctx){
    if(!InnerCreatorContext_cls) InnerCreatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "InnerCreatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InnerCreatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitArrayCreatorRest(JavaLabeledParser::ArrayCreatorRestContext *ctx){
    if(!ArrayCreatorRestContext_cls) ArrayCreatorRestContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArrayCreatorRestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArrayCreatorRestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitClassCreatorRest(JavaLabeledParser::ClassCreatorRestContext *ctx){
    if(!ClassCreatorRestContext_cls) ClassCreatorRestContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassCreatorRestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassCreatorRestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExplicitGenericInvocation(JavaLabeledParser::ExplicitGenericInvocationContext *ctx){
    if(!ExplicitGenericInvocationContext_cls) ExplicitGenericInvocationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeArgumentsOrDiamond(JavaLabeledParser::TypeArgumentsOrDiamondContext *ctx){
    if(!TypeArgumentsOrDiamondContext_cls) TypeArgumentsOrDiamondContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentsOrDiamondContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentsOrDiamondContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitNonWildcardTypeArgumentsOrDiamond(JavaLabeledParser::NonWildcardTypeArgumentsOrDiamondContext *ctx){
    if(!NonWildcardTypeArgumentsOrDiamondContext_cls) NonWildcardTypeArgumentsOrDiamondContext_cls = PyObject_GetAttrString(translator->parser_cls, "NonWildcardTypeArgumentsOrDiamondContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NonWildcardTypeArgumentsOrDiamondContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitNonWildcardTypeArguments(JavaLabeledParser::NonWildcardTypeArgumentsContext *ctx){
    if(!NonWildcardTypeArgumentsContext_cls) NonWildcardTypeArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "NonWildcardTypeArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NonWildcardTypeArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeList(JavaLabeledParser::TypeListContext *ctx){
    if(!TypeListContext_cls) TypeListContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeType(JavaLabeledParser::TypeTypeContext *ctx){
    if(!TypeTypeContext_cls) TypeTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitPrimitiveType(JavaLabeledParser::PrimitiveTypeContext *ctx){
    if(!PrimitiveTypeContext_cls) PrimitiveTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrimitiveTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrimitiveTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitTypeArguments(JavaLabeledParser::TypeArgumentsContext *ctx){
    if(!TypeArgumentsContext_cls) TypeArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitSuperSuffix1(JavaLabeledParser::SuperSuffix1Context *ctx){
    if(!SuperSuffix1Context_cls) SuperSuffix1Context_cls = PyObject_GetAttrString(translator->parser_cls, "SuperSuffix1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SuperSuffix1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitSuperSuffix0(JavaLabeledParser::SuperSuffix0Context *ctx){
    if(!SuperSuffix0Context_cls) SuperSuffix0Context_cls = PyObject_GetAttrString(translator->parser_cls, "SuperSuffix0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SuperSuffix0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExplicitGenericInvocationSuffix0(JavaLabeledParser::ExplicitGenericInvocationSuffix0Context *ctx){
    if(!ExplicitGenericInvocationSuffix0Context_cls) ExplicitGenericInvocationSuffix0Context_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationSuffix0Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationSuffix0Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitExplicitGenericInvocationSuffix1(JavaLabeledParser::ExplicitGenericInvocationSuffix1Context *ctx){
    if(!ExplicitGenericInvocationSuffix1Context_cls) ExplicitGenericInvocationSuffix1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitGenericInvocationSuffix1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitGenericInvocationSuffix1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_JavaLabeledTranslator::visitArguments(JavaLabeledParser::ArgumentsContext *ctx){
    if(!ArgumentsContext_cls) ArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArgumentsContext_cls);
    return py_ctx;
}
